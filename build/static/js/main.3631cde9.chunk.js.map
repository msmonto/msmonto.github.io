{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getEmptyTable","range","map","_","initialTable","undefined","Solver","solutionFound","state","originalTable","table","solving","renderBoard","className","classNames","row","idx","renderRow","rowIndex","value","colIndex","isOriginal","solve","a","setState","copyBoard","console","solveHelper","dir","clear","col","board","nextCol","advanceRow","nextRow","Math","random","forceUpdate","Promise","res","window","setTimeout","isValid","areRowsValid","every","isRowValid","areColumnsValid","isColumnValid","areBoxesValid","column","is3by3BoxValid","cells","i","j","push","some","cell","index","indexOf","this","Classes","DARK","disabled","intent","Intent","PRIMARY","text","size","onClick","React","PureComponent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3631cde9.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Classes, Intent, Spinner } from \"@blueprintjs/core\";\nimport \"./Solver.scss\";\nimport classNames from \"classnames\";\nimport { range, delay } from \"lodash\"\n\ntype SudokuCell = number | undefined;\ntype SudokuRow = [SudokuCell, SudokuCell, SudokuCell, SudokuCell, SudokuCell, SudokuCell, SudokuCell, SudokuCell, SudokuCell];\ntype SudokuTable = [SudokuRow, SudokuRow, SudokuRow, SudokuRow, SudokuRow, SudokuRow, SudokuRow, SudokuRow, SudokuRow];\n\ninterface State {\n  table: SudokuTable;\n  originalTable: SudokuTable;\n  solving: boolean;\n}\n\nconst getEmptyTable = () => {\n  const board = range(0, 9).map(_ => range(0, 9).map(_ => undefined)) as SudokuTable;\n  return board;\n}\n\nconst initialTable: SudokuTable = [\n  [8, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined],\n  [undefined, undefined, 3, 6, undefined, undefined, undefined, undefined, undefined],\n  [undefined, 7, undefined, undefined, 9, undefined, 2, undefined, undefined],\n  [undefined, 5, undefined, undefined, undefined, 7, undefined, undefined, undefined],\n  [undefined, undefined, undefined, undefined, 4, 5, 7, undefined, undefined],\n  [undefined, undefined, undefined, 1, undefined, undefined, undefined, 3, undefined],\n  [undefined, undefined, 1, undefined, undefined, undefined, undefined, 6, 8],\n  [undefined, undefined, 8, 5, undefined, undefined, undefined, 1, undefined],\n  [undefined, 9, undefined, undefined, undefined, undefined, 4, undefined, undefined]\n]\n\nexport class Solver extends React.PureComponent<{}, State> {\n\n\n  private solutionFound = false;\n\n  public state: State = {\n    originalTable: initialTable,\n    table: initialTable,\n    solving: false,\n  }\n\n  public render() {\n    const { solving } = this.state;\n    return <div className={classNames(Classes.DARK, \"content\")}>\n      <div className=\"title\">Sudoku Solver</div>\n      {this.renderBoard()}\n      <div className=\"buttons\">\n        <Button className=\"solve-button\" disabled={solving} intent={Intent.PRIMARY} text={solving ? <Spinner size={8} /> : \"Solve\"} onClick={this.solve} />\n        <Button text=\"Clear\" disabled={solving} onClick={this.clear} />\n      </div>\n    </div>\n  }\n\n  private renderBoard = () => {\n    const { table, solving } = this.state;\n    return (\n      <div className={classNames(\"board\", {\n        \"solved\": this.solutionFound,\n        \"solving\": solving\n      })}>\n        {\n          table.map((row, idx) => this.renderRow(row, idx))\n        }\n      </div>\n    )\n  }\n\n  private renderRow = (row: SudokuRow, rowIndex: number) => {\n    const { originalTable } = this.state;\n    return (\n      <div className=\"row\">\n        {\n          row.map((value, colIndex) => {\n            const isOriginal = originalTable[rowIndex][colIndex] != undefined;\n            return <span className={classNames(\"cell\", {\n              \"original\": isOriginal\n            })}>{value}</span>\n          })\n        }\n      </div>\n    )\n  }\n\n  private solve = async () => {\n    this.setState({\n      solving: true\n    })\n    this.solutionFound = false;\n    const { originalTable } = this.state;\n    const table = this.copyBoard(originalTable);\n    this.setState({\n      table\n    }, async () => {\n      console.dir(await this.solveHelper(0, 0, table));\n      this.setState({\n        solving: false\n      })\n    })\n  }\n\n  private clear = () => {\n    this.setState({\n      table: getEmptyTable()\n    });\n  }\n\n  private solveHelper: (row: number, col: number, board: SudokuTable) => Promise<any> = async (row, col, board) => {\n\n    if (row > 8 || col > 8 || this.solutionFound) {\n      return undefined;\n    }\n\n    const advanceRow = col === 8;\n    const nextCol = advanceRow ? 0 : col + 1;\n    const nextRow = advanceRow ? row + 1 : row;\n\n    if (board[row][col] != undefined) {\n      await this.solveHelper(nextRow, nextCol, board);\n      return;\n    }\n\n    for (let value = 1; value < 10; value++) {\n      if (this.solutionFound) {\n        return;\n      }\n      board[row][col] = value;\n\n      if (Math.random() < 0.0025) {\n        this.forceUpdate();\n        await new Promise((res) => {\n          window.setTimeout(res, 0);\n        })\n      }\n\n      if (this.isValid(board) && row === 8 && col === 8) {\n        this.solutionFound = true;\n        this.forceUpdate();\n        return;\n      }\n\n      if (!this.isValid(board) && !this.solutionFound) {\n        board[row][col] = undefined;\n        continue;\n      }\n\n      // valid board, continue\n      await this.solveHelper(nextRow, nextCol, board);\n      if (!this.solutionFound) {\n        board[row][col] = undefined;\n      }\n    }\n\n    return;\n  }\n\n  private isValid = (table: SudokuTable) => {\n    const areRowsValid = table.every(row => this.isRowValid(row));\n    const areColumnsValid = range(0, 9).every(col => this.isColumnValid(col));\n    const areBoxesValid = this.areBoxesValid();\n\n    return areRowsValid && areColumnsValid && areBoxesValid;\n  }\n\n  private isColumnValid = (column: number) => {\n    const { table } = this.state;\n    const col: SudokuCell[] = table.map(row => row[column]);\n\n    return this.isRowValid(col);\n  }\n\n  private areBoxesValid = () => {\n    for (let row = 0; row < 9; row += 3) {\n      for (let column = 0; column < 9; column += 3) {\n        if (!this.is3by3BoxValid(row, column)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private is3by3BoxValid = (row: number, col: number) => {\n    const { table } = this.state;\n    const cells = [];\n    for (let i = row; i < row + 3; i++) {\n      for (let j = col; j < col + 3; j++) {\n        cells.push(table[i][j]);\n      }\n    }\n\n    return this.isRowValid(cells);\n  }\n\n  private isRowValid = (row: SudokuRow | SudokuCell[]) => {\n    return !row.some((cell, index) => cell != undefined && row.indexOf(cell) !== index);\n  }\n\n  private copyBoard = (board: SudokuTable) => {\n    return board.map(row => [...row]) as SudokuTable;\n  }\n\n}\n\nexport default Solver;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}